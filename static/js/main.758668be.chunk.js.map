{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SOURCE_SIZE","constraints","video","facingMode","ideal","resizeMode","width","getOcrWhitelist","arr","Set","join","split","ocrScheduler","createScheduler","workerLoggerHook","tesseractReady","loadTesseractWorkers","initPromises","i","worker","createWorker","langPath","gzip","logger","msg","console","log","errorHandler","err","error","initPromise","load","then","loadLanguage","initialize","setParameters","tessedit_char_whitelist","tessedit_pageseg_mode","PSM","SINGLE_COLUMN","addWorker","push","Promise","all","stringifyError","isNaN","cv","exceptionFromPtr","ptr","Number","Error","stack","replace","mapRange","value","x1","y1","x2","y2","mapPoint","inRange","outRange","x","y","Point","xmin","xmax","ymin","ymax","pointDistance","a","b","Math","hypot","vectorFromPoints","start","end","vectorDot","App","useEffect","window","feather","useState","videoRef","useRef","outputCanvasRef","debugCanvasRef","outputCanvasType","setOutputCanvasType","renderDebugCanvasRef","current","sourceCanvasRef","displayCanvasRef","fpsRef","cvRunning","setCvRunning","handleStart","handleloadedmetadata","navigator","mediaDevices","getUserMedia","alert","updContstraints","addEventListener","setAttribute","stream","srcObject","captureImg","setCaptureImg","outputColsRef","captureCanvasRef","handleCaptureClicked","useCallback","clientWidth","height","clientHeight","ctx","getContext","drawImage","classList","remove","imgDataUrl","toDataURL","src","setTimeout","xSplits","tileWidth","abs","colSlices","map","getImageData","currXOffset","progress","beginPath","fillStyle","fillRect","closePath","sliceCanvas","document","createElement","length","colSlice","putImageData","imageData","addJob","data","text","lines","textAlign","confidence","bbox","x0","y0","strokeStyle","lineWidth","strokeRect","trimmedText","font","strokeText","handleStopClicked","animFrameId","fpsSamples","getFps","reduce","doRender","timestamp","undefined","startTs","requestAnimationFrame","fps","shift","innerText","round","closestTo","points","point","max","val","displayCtx","videoCropX","videoCropY","videoSmallestEdge","displayWidth","displayHeight","displayGridStartX","displayGridStartY","displayGridWidth","displayGridHeight","sourceCtx","image","sourceGridStartX","sourceGridStartY","sourceGridWidth","sourceGridHeight","sourceImg","matFromImageData","result","Mat","cvtColor","COLOR_BGR2GRAY","delete","blurred","GaussianBlur","Size","BORDER_DEFAULT","threshold","THRESH_BINARY","dilated","kernel","ones","CV_8U","anchor","dilate","BORDER_CONSTANT","morphologyDefaultBorderValue","contours","MatVector","hierarchy","findContours","RETR_EXTERNAL","CHAIN_APPROX_SIMPLE","output","clone","closestGridSize","isInteger","sqrt","size","areaOfTileOfClosestGrid","tileSizeOfClosestGrid","midpoint","rect","dilatedC","COLOR_GRAY2RGB","nearTileSizeContours","contoursSize","cnt","get","area","contourArea","boundingRect","aspectRatio","imshow","boundingBoxMedianHeight","medianBy","selector","mapped","sort","midIdx","floor","boundingBoxMedianWidth","rectsClosestToMedian","slice","boundingRectangles","forEach","mA","mB","isRectTooWeird","getThreePointEdgeAngle","c","acos","PI","topLeftAngle","bottomLeft","topLeft","topRight","topRightAngle","bottomRight","bottomRightAngle","bottomLeftAngle","diffTlBl","diffTlTr","diffTrBr","diffBlBr","topBotLinesRatio","leftRightLinesRatio","min","vertLineLen","fourPointTransform","tl","tr","br","bl","widthBot","widthTop","maxWidth","heightLeft","heightRight","maxHeight","newSideLength","srcRect","matFromArray","CV_32FC2","dstRect","M","getPerspectiveTransform","newWidth","newHeight","mat4_1_CV32FtoPoints","mat","data32F","midpoints","resized","resize","INTER_AREA","padX","acualGridTileWidth","padY","M_inv","inv","DECOMP_SVD","paddedDstRect","paddedOriginalRect","zeros","perspectiveTransform","paddedPoints","M_padded","newHeightPadded","newWidthPadded","newSizeAspectRatio","some","perspectived","warpPerspective","INTER_LINEAR","Scalar","cols","pair","moveTo","lineTo","stroke","bitwise_not","videoWidth","videoHeight","sourceWidth","sourceHeight","cancelAnimationFrame","className","autoPlay","ref","style","display","type","onClick","padding","boxSizing","border","alt","title","data-feather","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.758668be.chunk.js","sourcesContent":["/* global cv */\n\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { createWorker, createScheduler, PSM } from \"tesseract.js\";\nimport \"./App.css\";\n\nconst SOURCE_SIZE = 1080;\n\nconst constraints = {\n  video: {\n    facingMode: {\n      ideal: \"environment\",\n    },\n    /* aspectRatio: {\n      ideal: 1,\n    }, */\n    resizeMode: \"crop-and-scale\",\n    width: {\n      ideal: SOURCE_SIZE,\n    },\n  },\n};\n\nconst uniqChars = (arr) => [...new Set(arr.join(\"\").split(\"\"))];\nconst getOcrWhitelist = () =>\n  [\" \", ...uniqChars([\"1C\", \"55\", \"7A\", \"BD\", \"E9\", \"FF\"])].join(\"\");\n\nconst ocrScheduler = createScheduler();\n\nlet workerLoggerHook = null;\n\n/** @type {Promise<void>} */\nlet tesseractReady = null;\n\n/** @returns {Promise<void>} */\nconst loadTesseractWorkers = () => {\n  if (tesseractReady !== null) {\n    return tesseractReady;\n  }\n\n  // const MAX_PROBABLE_COL_COUNT = 7;\n  // const workerCount = window.navigator?.hardwareConcurrency\n  //   ? Math.min(window.navigator.hardwareConcurrency, MAX_PROBABLE_COL_COUNT)\n  //   : 2;\n\n  const initPromises = [];\n  for (let i = 0; i < 1; i++) {\n    const worker = createWorker({\n      langPath: \"/ocr\",\n      gzip: false,\n      logger: (msg) => {\n        console.log(`[worker ${i}]: `, msg);\n\n        if (workerLoggerHook) {\n          workerLoggerHook(msg);\n        }\n      },\n      errorHandler: (err) => console.error(`[worker ${i}]: `, err),\n    });\n\n    const initPromise = worker\n      .load()\n      .then(() => worker.loadLanguage(\"eng\"))\n      .then(() => worker.initialize(\"eng\"))\n      .then(() =>\n        worker.setParameters({\n          tessedit_char_whitelist: getOcrWhitelist(),\n          tessedit_pageseg_mode: PSM.SINGLE_COLUMN,\n        })\n      )\n      .then(() => {\n        ocrScheduler.addWorker(worker);\n      });\n    initPromises.push(initPromise);\n  }\n\n  tesseractReady = Promise.all(initPromises);\n  return tesseractReady;\n};\n\nfunction stringifyError(err) {\n  if (typeof err === \"undefined\") {\n    err = \"\";\n  } else if (typeof err === \"number\") {\n    if (!isNaN(err)) {\n      if (typeof cv !== \"undefined\") {\n        err = \"Exception: \" + cv.exceptionFromPtr(err).msg;\n      }\n    }\n  } else if (typeof err === \"string\") {\n    let ptr = Number(err.split(\" \")[0]);\n    if (!isNaN(ptr)) {\n      if (typeof cv !== \"undefined\") {\n        err = \"Exception: \" + cv.exceptionFromPtr(ptr).msg;\n      }\n    }\n  } else if (err instanceof Error) {\n    err = err.stack.replace(/\\n/g, \"<br>\");\n  }\n  return err;\n}\n\nconst mapRange = (value, x1, y1, x2, y2) =>\n  ((value - x1) * (y2 - x2)) / (y1 - x1) + x2;\nconst mapPoint = ({ x, y }, inRange, outRange) =>\n  new cv.Point(\n    mapRange(x, inRange.xmin, inRange.xmax, outRange.xmin, outRange.xmax),\n    mapRange(y, inRange.ymin, inRange.ymax, outRange.ymin, outRange.ymax)\n  );\n\nconst pointDistance = (a, b) => Math.hypot(b.x - a.x, b.y - a.y);\nconst vectorFromPoints = (start, end) => ({\n  x: end.x - start.x,\n  y: end.y - start.y,\n});\nconst vectorDot = (a, b) => a.x * b.x + a.y * b.y;\n\nfunction App() {\n  useEffect(() => {\n    window.feather.replace();\n  }, []);\n\n  const [videoDevices, setVideoDevices] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState();\n\n  /*useEffect(() => {\n    (async () => {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n        alert(\"enumerateDevices() not supported.\");\n        return;\n      }\n\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const videoDevices = devices.filter(\n        (device) => device.kind === \"videoinput\"\n      );\n\n      setVideoDevices(videoDevices);\n    })();\n  }, []);*/\n\n  const videoRef = useRef();\n  const outputCanvasRef = useRef();\n  const debugCanvasRef = useRef();\n  const [outputCanvasType, setOutputCanvasType] = useState(\"normal\");\n  const renderDebugCanvasRef = useRef(false);\n  renderDebugCanvasRef.current = outputCanvasType === \"debug\";\n  const sourceCanvasRef = useRef();\n\n  const displayCanvasRef = useRef();\n\n  const fpsRef = useRef();\n\n  const [cvRunning, setCvRunning] = useState(false);\n\n  const handleStart = async () => {\n    setCvRunning(false);\n\n    if (!navigator?.mediaDevices?.getUserMedia) {\n      alert(\n        `Your browser does not support MediaDevices.getUserMedia(). Your browser may be too old. If you're on iOS, only Safari supports the camera API.`\n      );\n      return;\n    }\n    const updContstraints = {\n      ...constraints,\n      /*deviceId: {\n                exact: selectedDevice.deviceId,\n              },*/\n    };\n\n    function handleloadedmetadata() {\n      setCvRunning(true);\n    }\n    videoRef.current.addEventListener(\"loadedmetadata\", handleloadedmetadata);\n    videoRef.current.setAttribute(\"autoplay\", \"\");\n    videoRef.current.setAttribute(\"muted\", \"\");\n    videoRef.current.setAttribute(\"playsinline\", \"\");\n\n    const stream = await window.navigator.mediaDevices.getUserMedia(\n      updContstraints\n    );\n    videoRef.current.srcObject = stream;\n    //videoRef.current.play();\n  };\n\n  const [captureImg, setCaptureImg] = useState();\n\n  const outputColsRef = useRef([]);\n  const captureCanvasRef = useRef();\n\n  const handleCaptureClicked = useCallback(() => {\n    setCvRunning(false);\n\n    captureCanvasRef.current.width = outputCanvasRef.current.clientWidth;\n    captureCanvasRef.current.height = outputCanvasRef.current.clientHeight;\n    /** @type {CanvasRenderingContext2D} */\n    const ctx = captureCanvasRef.current.getContext(\"2d\");\n    ctx.drawImage(outputCanvasRef.current, 0, 0);\n\n    captureCanvasRef.current.classList.remove(\"d-none\");\n    const imgDataUrl = outputCanvasRef.current.toDataURL(\"image/png\");\n    setCaptureImg({ src: imgDataUrl });\n\n    setTimeout(async () => {\n      try {\n        console.log(\"beginning to load tesseract workers\");\n        await loadTesseractWorkers();\n        console.log(\"finish loading tesseract workers\");\n\n        const height = captureCanvasRef.current.height;\n        const xSplits = outputColsRef.current;\n        const tileWidth = Math.abs(xSplits[1] - xSplits[0]);\n        const colSlices = xSplits.map((split) =>\n          ctx.getImageData(split, 0, tileWidth, height)\n        );\n\n        let currXOffset = 0;\n\n        workerLoggerHook = (msg) => {\n          console.log(`[worker]: `, msg);\n\n          if (!isNaN(msg.progress)) {\n            ctx.beginPath();\n            ctx.fillStyle = \"#3498db\";\n            ctx.fillRect(currXOffset, 0, tileWidth * msg.progress, 10);\n            ctx.closePath();\n          }\n        };\n\n        /*const jobs = await Promise.all(\n          xSplits.map((x) =>\n            ocrScheduler.addJob(\"recognize\", captureCanvasRef.current, {\n              rectangle: {\n                top: 0,\n                left: x,\n                height: height,\n                width: tileWidth,\n              },\n            })\n          )\n        );*/\n\n        const sliceCanvas = document.createElement(\"canvas\");\n        for (let i = 0; i < xSplits.length; i++) {\n          currXOffset = xSplits[i];\n          const colSlice = colSlices[i];\n          sliceCanvas.width = tileWidth;\n          sliceCanvas.height = height;\n          sliceCanvas.getContext(\"2d\").putImageData(colSlice, 0, 0);\n          const imageData = sliceCanvas.toDataURL(\"image/png\");\n\n          const { data } = await ocrScheduler.addJob(\"recognize\", imageData);\n          const { text, lines } = data;\n\n          ctx.textAlign = \"center\";\n          for (const { confidence, text, bbox } of lines) {\n            const { x0, y0, x1, y1 } = bbox;\n\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(255, 0, 0, ${confidence * 255})`;\n            ctx.lineWidth = 2;\n            ctx.strokeRect(xSplits[i] + x0, y0, x1 - x0, y1 - y0);\n\n            const trimmedText = text.replace(/\\s+/g, \"\");\n\n            ctx.font = '20px \"Rajdhani SemiBold\"';\n            ctx.strokeText(\n              trimmedText,\n              xSplits[i] + x0 + (x1 - x0) / 2,\n              y1 + 25\n            );\n            ctx.closePath();\n          }\n          console.log(data);\n        }\n      } catch (e) {\n        console.error(e);\n        alert(e);\n      }\n    }, 100);\n  }, [setCvRunning, outputCanvasRef, setCaptureImg, outputColsRef]);\n\n  const handleStopClicked = useCallback(() => {\n    setCvRunning(false);\n  }, [setCvRunning]);\n\n  useEffect(() => {\n    if (!cvRunning) {\n      return;\n    }\n\n    let animFrameId;\n\n    const fpsSamples = [0, 0, 0, 0, 0, 0];\n    const getFps = () => fpsSamples.reduce((a, b) => a + b) / fpsSamples.length;\n    (async () => {\n      /** @type {CanvasRenderingContext2D} */\n      const displayCtx = displayCanvasRef.current.getContext(\"2d\");\n      /** @type {CanvasRenderingContext2D} */\n      const sourceCtx = sourceCanvasRef.current.getContext(\"2d\");\n\n      const videoSmallestEdge = Math.min(\n        videoRef.current.videoWidth,\n        videoRef.current.videoHeight\n      );\n      const videoWidth =\n        videoRef.current.videoWidth === videoSmallestEdge\n          ? videoRef.current.videoWidth\n          : videoRef.current.videoHeight;\n      const videoHeight =\n        videoRef.current.videoHeight === videoSmallestEdge\n          ? videoRef.current.videoHeight\n          : videoRef.current.videoWidth;\n      const videoCropX = Math.floor(\n        (videoRef.current.videoWidth - videoWidth) / 2\n      );\n      const videoCropY = Math.floor(\n        (videoRef.current.videoHeight - videoHeight) / 2\n      );\n\n      sourceCanvasRef.current.width = SOURCE_SIZE;\n      sourceCanvasRef.current.height = SOURCE_SIZE;\n      const sourceWidth = SOURCE_SIZE;\n      const sourceHeight = SOURCE_SIZE;\n\n      const displayWidth = displayCanvasRef.current.clientWidth;\n      const displayHeight = displayWidth;\n      displayCanvasRef.current.width = displayWidth;\n      displayCanvasRef.current.height = displayHeight;\n      debugCanvasRef.current.width = displayWidth;\n      debugCanvasRef.current.height = displayHeight;\n\n      const renderGridSizeMultiplier = 1 / 2;\n      const sourceGridWidth = sourceWidth * renderGridSizeMultiplier;\n      const sourceGridHeight = sourceWidth * renderGridSizeMultiplier;\n      const sourceGridStartX = sourceWidth / 2 - sourceGridWidth / 2;\n      const sourceGridStartY = sourceHeight / 2 - sourceGridHeight / 2;\n\n      outputCanvasRef.current.width = sourceGridWidth;\n      outputCanvasRef.current.height = sourceGridHeight;\n\n      const displayGridWidth = (displayWidth / sourceWidth) * sourceGridWidth;\n      const displayGridHeight =\n        (displayHeight / sourceHeight) * sourceGridHeight;\n      const displayGridStartX = displayWidth / 2 - displayGridWidth / 2;\n      const displayGridStartY = displayHeight / 2 - displayGridHeight / 2;\n\n      if (window.cv instanceof Promise) {\n        window.cv = await window.cv;\n      }\n\n      displayCtx.font = \"16px Input\";\n\n      let startTs;\n      async function doRender(timestamp) {\n        if (startTs === undefined) startTs = timestamp;\n        else if (timestamp - startTs < 33) {\n          animFrameId = window.requestAnimationFrame(doRender);\n          return;\n        }\n\n        const fps = 1000 / (timestamp - startTs);\n        fpsSamples.shift();\n        fpsSamples.push(fps);\n        fpsRef.current.innerText = `${Math.round(getFps())}`;\n        startTs = timestamp;\n\n        try {\n          displayCtx.drawImage(\n            videoRef.current,\n            videoCropX,\n            videoCropY,\n            videoSmallestEdge,\n            videoSmallestEdge,\n            0,\n            0,\n            displayWidth,\n            displayHeight\n          );\n\n          displayCtx.strokeStyle = \"#00ff00\";\n          displayCtx.lineWidth = 2;\n\n          displayCtx.strokeRect(\n            displayGridStartX,\n            displayGridStartY,\n            displayGridWidth,\n            displayGridHeight\n          );\n\n          sourceCtx.drawImage(\n            videoRef.current,\n            videoCropX,\n            videoCropY,\n            videoSmallestEdge,\n            videoSmallestEdge,\n            0,\n            0,\n            sourceCanvasRef.current.width,\n            sourceCanvasRef.current.height\n          );\n          const image = sourceCtx.getImageData(\n            sourceGridStartX,\n            sourceGridStartY,\n            sourceGridWidth,\n            sourceGridHeight\n          );\n\n          const sourceImg = cv.matFromImageData(image);\n          const result = new cv.Mat();\n\n          // This converts the image to a greyscale.\n          cv.cvtColor(sourceImg, result, cv.COLOR_BGR2GRAY);\n          sourceImg.delete();\n\n          const blurred = new cv.Mat();\n          cv.GaussianBlur(\n            result,\n            blurred,\n            new cv.Size(5, 5),\n            0,\n            0,\n            cv.BORDER_DEFAULT\n          );\n          result.delete();\n\n          const threshold = new cv.Mat();\n          cv.threshold(blurred, threshold, 185, 255, cv.THRESH_BINARY);\n          blurred.delete();\n\n          const dilated = new cv.Mat();\n          const kernel = cv.Mat.ones(4, 4, cv.CV_8U);\n          const anchor = new cv.Point(-1, -1);\n\n          cv.dilate(\n            threshold,\n            dilated,\n            kernel,\n            anchor,\n            5,\n            cv.BORDER_CONSTANT,\n            cv.morphologyDefaultBorderValue()\n          );\n          kernel.delete();\n\n          const contours = new cv.MatVector();\n          const hierarchy = new cv.Mat();\n          cv.findContours(\n            dilated,\n            contours,\n            hierarchy,\n            cv.RETR_EXTERNAL,\n            cv.CHAIN_APPROX_SIMPLE\n          );\n\n          //dilated.delete();\n\n          let output = threshold.clone();\n          threshold.delete();\n\n          // Subtract a couple from the guess before sqrt because the UI text elements\n          // below the grid dilate up to be around the size of the grid elements, so\n          // at low actual grid sizes this throws the guess up to 5 instead of 4\n          const contourLenModifier = -2;\n          const closestGridSize = Number.isInteger(Math.sqrt(contours.size()))\n            ? Math.sqrt(contours.size())\n            : Math.round(\n                // sub 0.25 to prefer rounding down instead of up since it's more likely\n                // that there's MORE non-grid elements on screen instead of fewer\n                Math.sqrt(contours.size() + contourLenModifier) - 0.25\n              );\n          const tileSizeOfClosestGrid = sourceGridWidth / (closestGridSize - 1);\n          const areaOfTileOfClosestGrid =\n            tileSizeOfClosestGrid * tileSizeOfClosestGrid;\n\n          const midpoint = (rect) => ({\n            x: rect.x + rect.width / 2,\n            y: rect.y + rect.height / 2,\n          });\n\n          const dilatedC = new cv.Mat();\n          cv.cvtColor(dilated, dilatedC, cv.COLOR_GRAY2RGB);\n          dilated.delete();\n\n          let nearTileSizeContours = [];\n          const contoursSize = contours.size();\n          for (let i = 0; i < contoursSize; i++) {\n            const cnt = contours.get(i);\n            const area = cv.contourArea(cnt);\n\n            // skip contours that aren't near approx size\n            const rect = cv.boundingRect(cnt);\n            const aspectRatio = rect.width / rect.height;\n            if (\n              area <= areaOfTileOfClosestGrid &&\n              aspectRatio < 2.5 &&\n              aspectRatio > 0.8\n            ) {\n              nearTileSizeContours.push({\n                cnt,\n                boundingRect: rect,\n                midpoint: midpoint(rect),\n              });\n              /* cv.rectangle(\n                output,\n                { x: rect.x, y: rect.y },\n                { x: rect.x + rect.width, y: rect.y + rect.height },\n                new cv.Scalar(255, 255, 255),\n                2\n              ); */\n            } else {\n              // not used for anything anymore, clean up - selected cnts are cleaned up later\n              cnt.delete();\n            }\n          }\n\n          if (renderDebugCanvasRef.current) {\n            cv.imshow(debugCanvasRef.current, dilatedC);\n          }\n          dilatedC.delete();\n\n          const medianBy = (arr, selector) => {\n            if (arr.length === 0) {\n              return 0;\n            }\n            if (arr.length === 1) {\n              return selector(arr[0]);\n            }\n\n            const mapped = arr.map((a) => selector(a));\n            mapped.sort((a, b) => a - b);\n            const midIdx = Math.floor(mapped.length / 2);\n            return mapped.length % 2 !== 0\n              ? mapped[midIdx]\n              : (mapped[midIdx - 1] + mapped[midIdx]) / 2;\n          };\n\n          // Get the median bounding box height\n          const boundingBoxMedianHeight = medianBy(\n            nearTileSizeContours,\n            ({ boundingRect }) => boundingRect.height\n          );\n          const boundingBoxMedianWidth = medianBy(\n            nearTileSizeContours,\n            ({ boundingRect }) => boundingRect.width\n          );\n\n          const rectsClosestToMedian = [...nearTileSizeContours]\n            .sort(\n              ({ boundingRect: a }, { boundingRect: b }) =>\n                Math.hypot(\n                  a.height - boundingBoxMedianHeight,\n                  a.width - boundingBoxMedianWidth\n                ) -\n                Math.hypot(\n                  b.height - boundingBoxMedianHeight,\n                  a.width - boundingBoxMedianWidth\n                )\n            )\n            .slice(0, closestGridSize * closestGridSize);\n          const boundingRectangles = rectsClosestToMedian.map(\n            ({ boundingRect }) => boundingRect\n          );\n\n          nearTileSizeContours.forEach(({ cnt }) => cnt.delete());\n          contours.delete();\n          hierarchy.delete();\n\n          boundingRectangles.sort((a, b) => {\n            const mA = midpoint(a);\n            const mB = midpoint(b);\n            return mA.y > mB.y\n              ? mA.x + mA.y * 1000 - (mB.x + mB.y * 1000)\n              : mA.x + mA.y * 1000 - (mB.x + mB.y * 1000);\n          });\n\n          function closestTo(points, point) {\n            return points.reduce((max, val) => {\n              return Math.hypot(point.x - val.x, point.y - val.y) <\n                Math.hypot(point.x - max.x, point.y - max.y)\n                ? val\n                : max;\n            });\n          }\n\n          if (\n            boundingRectangles.length === closestGridSize * closestGridSize &&\n            closestGridSize >= 3\n          ) {\n            const midpoints = boundingRectangles.map((rect) => midpoint(rect));\n            const topLeft = closestTo(midpoints, { x: 0, y: 0 });\n            const topRight = closestTo(midpoints, {\n              x: sourceGridWidth,\n              y: 0,\n            });\n            const bottomLeft = closestTo(midpoints, {\n              x: 0,\n              y: sourceGridHeight,\n            });\n            const bottomRight = closestTo(midpoints, {\n              x: sourceGridWidth,\n              y: sourceGridHeight,\n            });\n\n            function isRectTooWeird() {\n              const getThreePointEdgeAngle = (a, b, c) =>\n                Math.acos(\n                  vectorDot(vectorFromPoints(a, b), vectorFromPoints(b, c)) /\n                    (pointDistance(a, b) * pointDistance(b, c))\n                ) *\n                (180 / Math.PI);\n\n              const topLeftAngle = getThreePointEdgeAngle(\n                bottomLeft,\n                topLeft,\n                topRight\n              );\n              const topRightAngle = getThreePointEdgeAngle(\n                topLeft,\n                topRight,\n                bottomRight\n              );\n              const bottomRightAngle = getThreePointEdgeAngle(\n                topRight,\n                bottomRight,\n                bottomLeft\n              );\n              const bottomLeftAngle = getThreePointEdgeAngle(\n                bottomRight,\n                bottomLeft,\n                topLeft\n              );\n\n              // not an isosceles trapezoid?\n              const diffTlBl = Math.abs(topLeftAngle - bottomLeft);\n              const diffTlTr = Math.abs(topLeftAngle - topRightAngle);\n              const diffTrBr = Math.abs(topRightAngle - bottomRightAngle);\n              const diffBlBr = Math.abs(bottomLeftAngle - bottomRightAngle);\n              if (\n                diffTlBl > 5 &&\n                diffTrBr > 5 &&\n                diffTlTr > 5 &&\n                diffBlBr > 5\n              ) {\n                console.log(\"[rectTooWeird] not an isosceles trapezoid\");\n                return true;\n              }\n\n              if (\n                Math.abs(topLeftAngle - topRightAngle) > 25 &&\n                Math.abs(bottomLeftAngle - bottomRightAngle) > 25\n              ) {\n                // parallellogram?\n                console.log(\"[rectTooWeird] parallellogram\");\n                return true;\n              }\n\n              const topBotLinesRatio =\n                pointDistance(topLeft, topRight) /\n                pointDistance(bottomLeft, bottomRight);\n              const leftRightLinesRatio =\n                pointDistance(topLeft, bottomLeft) /\n                pointDistance(topRight, bottomRight);\n\n              // opposite lines' ratios not too wonky -> not a near-triangle trapezoid or something\n              const max = 3;\n              const min = 1 / 3;\n              if (\n                topBotLinesRatio > max ||\n                topBotLinesRatio < min ||\n                leftRightLinesRatio > max ||\n                leftRightLinesRatio < min\n              ) {\n                console.log(\"[rectTooWeird] opposite line ratios\");\n                return true;\n              }\n\n              const vertLineLen =\n                (pointDistance(topLeft, bottomLeft) +\n                  pointDistance(topRight, bottomRight)) /\n                2;\n              const horizLineLen =\n                (pointDistance(topLeft, topRight) +\n                  pointDistance(bottomLeft, bottomRight)) /\n                2;\n              // aspect ratio is over 3? nah dawg\n              if (horizLineLen / vertLineLen > 3) {\n                console.log(\"[rectTooWeird] aspect ratio > 3\");\n                return true;\n              }\n\n              return false;\n            }\n\n            if (isRectTooWeird()) {\n              console.log(\"bail-isRectTooWeird\");\n              /* cv.putText(\n                output,\n                `grid: ${closestGridSize}`,\n                new cv.Point(10, 30),\n                cv.FONT_HERSHEY_PLAIN,\n                2,\n                new cv.Scalar(255, 255, 255),\n                2\n              ); */\n\n              const resized = new cv.Mat();\n              cv.resize(output, resized, new cv.Size(400, 400), cv.INTER_AREA);\n              output.delete();\n              output = resized;\n\n              cv.cvtColor(output, output, cv.COLOR_GRAY2RGB);\n              cv.imshow(outputCanvasRef.current, output);\n              output.delete();\n\n              animFrameId = window.requestAnimationFrame(doRender);\n              return;\n            }\n\n            // four point transform\n            function fourPointTransform({ tl, tr, br, bl }) {\n              // calculate new width of the image which is the largest\n              // distance between the top and bot lines\n              const widthBot = Math.hypot(br.x - bl.x, br.y - bl.y);\n              const widthTop = Math.hypot(tr.x - tl.x, tr.y - tl.y);\n              const maxWidth = Math.max(\n                Math.round(widthTop),\n                Math.round(widthBot)\n              );\n\n              // calculate new height\n              const heightLeft = Math.hypot(tr.x - br.x, tr.y - br.y);\n              const heightRight = Math.hypot(tl.x - bl.x, tl.y - bl.y);\n              const maxHeight = Math.max(\n                Math.round(heightLeft),\n                Math.round(heightRight)\n              );\n              const newSideLength = Math.min(maxWidth, maxHeight);\n\n              const srcRect = cv.matFromArray(4, 1, cv.CV_32FC2, [\n                tl.x,\n                tl.y,\n                tr.x,\n                tr.y,\n                br.x,\n                br.y,\n                bl.x,\n                bl.y,\n              ]);\n              const dstRect = cv.matFromArray(4, 1, cv.CV_32FC2, [\n                0,\n                0,\n                newSideLength - 1,\n                0,\n                newSideLength - 1,\n                newSideLength - 1,\n                0,\n                newSideLength - 1,\n              ]);\n\n              const M = cv.getPerspectiveTransform(srcRect, dstRect);\n\n              srcRect.delete();\n              dstRect.delete();\n\n              return { M, newWidth: newSideLength, newHeight: newSideLength };\n            }\n\n            const { M, newWidth, newHeight } = fourPointTransform({\n              tl: topLeft,\n              tr: topRight,\n              br: bottomRight,\n              bl: bottomLeft,\n            });\n\n            const acualGridTileWidth = newWidth / (closestGridSize - 1);\n\n            // pad it to the actua-l outer grid so camera doesn't get too close\n            const padX = acualGridTileWidth / 2;\n            const padY = acualGridTileWidth / 2;\n            const M_inv = M.inv(cv.DECOMP_SVD); // most similar to np.linalg.pinv(M)\n            M.delete();\n            const paddedDstRect = cv.matFromArray(4, 1, cv.CV_32FC2, [\n              -padX,\n              -padY,\n              newWidth - 1 + padX,\n              0 - padY,\n              newWidth - 1 + padX,\n              newHeight - 1 + padY,\n              0 - padX,\n              newHeight + 1 + padY,\n            ]);\n\n            const paddedOriginalRect = cv.Mat.zeros(4, 1, cv.CV_32FC2);\n            cv.perspectiveTransform(paddedDstRect, paddedOriginalRect, M_inv);\n            paddedDstRect.delete();\n            M_inv.delete();\n\n            function mat4_1_CV32FtoPoints(mat) {\n              let points = [];\n              for (let i = 0; i < 8; i += 2) {\n                points.push({ x: mat.data32F[i], y: mat.data32F[i + 1] });\n              }\n              return points;\n            }\n\n            const paddedPoints = mat4_1_CV32FtoPoints(paddedOriginalRect);\n            paddedOriginalRect.delete();\n\n            const {\n              M: M_padded,\n              newHeight: newHeightPadded,\n              newWidth: newWidthPadded,\n            } = fourPointTransform({\n              tl: paddedPoints[0],\n              tr: paddedPoints[1],\n              br: paddedPoints[2],\n              bl: paddedPoints[3],\n            });\n\n            const newSizeAspectRatio = newWidthPadded / newHeightPadded;\n\n            if (\n              newHeightPadded > sourceGridHeight + padY ||\n              newWidthPadded > sourceGridWidth + padX ||\n              newSizeAspectRatio > 1.2 ||\n              newSizeAspectRatio < 0.8 ||\n              paddedPoints.some(\n                (point) =>\n                  point.x < 0 - padX ||\n                  point.y < 0 - padY ||\n                  point.x > sourceGridWidth + padX ||\n                  point.y > sourceGridHeight + padY\n              )\n            ) {\n              // lol wtf, naw man\n              M_padded.delete();\n\n              console.log(\"bail-fuckload-of-ehtoja\");\n\n              /* cv.putText(\n                output,\n                `grid: ${closestGridSize}`,\n                new cv.Point(10, 30),\n                cv.FONT_HERSHEY_PLAIN,\n                2,\n                new cv.Scalar(255, 255, 255),\n                2\n              ); */\n\n              const resized = new cv.Mat();\n              cv.resize(output, resized, new cv.Size(400, 400), cv.INTER_AREA);\n              output.delete();\n              output = resized;\n\n              cv.cvtColor(output, output, cv.COLOR_GRAY2RGB);\n              cv.imshow(outputCanvasRef.current, output);\n              output.delete();\n\n              animFrameId = window.requestAnimationFrame(doRender);\n              return;\n            }\n\n            const perspectived = new cv.Mat();\n            cv.warpPerspective(\n              output,\n              perspectived,\n              M_padded,\n              new cv.Size(newHeightPadded, newWidthPadded),\n              cv.INTER_LINEAR,\n              cv.BORDER_CONSTANT,\n              new cv.Scalar()\n            );\n\n            M_padded.delete();\n\n            output.delete();\n            output = perspectived;\n\n            outputColsRef.current = [];\n            for (let i = 0; i < closestGridSize; i++) {\n              const x = mapRange(\n                i * acualGridTileWidth,\n                0,\n                output.cols,\n                0,\n                400\n              );\n              outputColsRef.current.push(x);\n            }\n            const tileColor = new cv.Scalar(255, 255, 255);\n            /* for (let y = 0; y < closestGridSize; y++) {\n              for (let x = 0; x < closestGridSize; x++) {\n                const xx = x * acualGridTileWidth;\n                const yy = y * acualGridTileWidth;\n                cv.rectangle(\n                  output,\n                  {\n                    x: xx + tilePad,\n                    y: yy + tilePad,\n                  },\n                  {\n                    x: xx + acualGridTileWidth - tilePad,\n                    y: yy + acualGridTileWidth - tilePad,\n                  },\n                  tileColor\n                );\n              }\n            } */\n\n            displayCtx.beginPath();\n            displayCtx.strokeStyle = \"#ff0000\";\n            displayCtx.lineWidth = 2;\n            [\n              [paddedPoints[0], paddedPoints[1]],\n              [paddedPoints[1], paddedPoints[2]],\n              [paddedPoints[2], paddedPoints[3]],\n              [paddedPoints[3], paddedPoints[0]],\n            ]\n              .map((pair) =>\n                pair.map((point) => {\n                  // interpolate point from sourceGrid onto displayGrid,\n                  // add displayGrid's displayCanvas offset and render\n                  // to displayGrid\n                  return mapPoint(\n                    point,\n                    {\n                      xmin: 0,\n                      xmax: sourceGridWidth,\n                      ymin: 0,\n                      ymax: sourceGridHeight,\n                    },\n                    {\n                      xmin: 0 + displayGridStartX,\n                      xmax: displayGridWidth + displayGridStartX,\n                      ymin: 0 + displayGridStartY,\n                      ymax: displayGridHeight + displayGridStartY,\n                    }\n                  );\n                })\n              )\n              .forEach(([start, end]) => {\n                displayCtx.moveTo(start.x, start.y);\n                displayCtx.lineTo(end.x, end.y);\n              });\n            displayCtx.stroke();\n            displayCtx.closePath();\n          }\n\n          const resized = new cv.Mat();\n          cv.resize(output, resized, new cv.Size(400, 400), cv.INTER_AREA);\n          output.delete();\n          output = resized;\n\n          /* cv.putText(\n            output,\n            `grid: ${closestGridSize}`,\n            new cv.Point(10, 30),\n            cv.FONT_HERSHEY_PLAIN,\n            2,\n            new cv.Scalar(255, 255, 255),\n            2\n          ); */\n\n          cv.bitwise_not(output, output);\n          cv.cvtColor(output, output, cv.COLOR_GRAY2RGB);\n          cv.imshow(outputCanvasRef.current, output);\n          output.delete();\n\n          // Render the processed image to the canvas\n          animFrameId = window.requestAnimationFrame(doRender);\n        } catch (e) {\n          const err = stringifyError(e);\n          console.error(err);\n          console.error(e);\n          alert(err);\n        }\n      }\n\n      animFrameId = window.requestAnimationFrame(doRender);\n    })();\n    return () => {\n      window.cancelAnimationFrame(animFrameId);\n    };\n  }, [cvRunning]);\n\n  return (\n    <>\n      <div className=\"display-cover\">\n        <video className=\"d-none\" autoPlay ref={videoRef}></video>\n        <p>display</p>\n        <div style={{ display: \"flex\" }}>\n          {[\"normal\", \"debug\"].map((type) => (\n            <button\n              key={type}\n              onClick={() => {\n                setOutputCanvasType(type);\n              }}\n            >\n              {type}\n            </button>\n          ))}\n        </div>\n        <canvas\n          style={{\n            width: \"100%\",\n            display: outputCanvasType === \"normal\" ? \"block\" : \"none\",\n          }}\n          ref={displayCanvasRef}\n        ></canvas>\n        <canvas\n          style={{\n            width: \"100%\",\n            display: outputCanvasType === \"debug\" ? \"block\" : \"none\",\n          }}\n          ref={debugCanvasRef}\n        ></canvas>\n        <p>source</p>\n        <canvas className=\"d-none\" ref={sourceCanvasRef}></canvas>\n\n        <button onClick={handleStopClicked} style={{ padding: \"0.5rem 2rem\" }}>\n          Stop\n        </button>\n        <button\n          onClick={handleCaptureClicked}\n          style={{ padding: \"0.5rem 2rem\" }}\n        >\n          Capture\n        </button>\n        <canvas\n          className=\"d-none\"\n          style={{ boxSizing: \"content-box\" }}\n          ref={captureCanvasRef}\n        ></canvas>\n\n        {captureImg && (\n          <>\n            <p>output img as {\"<img>\"} so you can save it</p>\n            <img src={captureImg.src} style={{ border: \"1px solid #00ff00\" }} />\n          </>\n        )}\n\n        <img className=\"screenshot-image d-none\" alt=\"\" />\n        <div className=\"controls\">\n          <button\n            onClick={handleStart}\n            className=\"btn btn-danger play\"\n            title=\"Play\"\n          >\n            <i data-feather=\"play-circle\"></i>\n          </button>\n          <button className=\"btn btn-info pause d-none\" title=\"Pause\">\n            <i data-feather=\"pause\"></i>\n          </button>\n          <button\n            className=\"btn btn-outline-success screenshot d-none\"\n            title=\"ScreenShot\"\n          >\n            <i data-feather=\"image\"></i>\n          </button>\n        </div>\n      </div>\n      <p>\n        output, fps: <span ref={fpsRef}></span>\n      </p>\n      <canvas className=\"\" ref={outputCanvasRef}></canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}